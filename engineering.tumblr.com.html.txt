
<!DOCTYPE html>
<script>var __pbpa = true;</script><script>var translated_warning_string = 'Warning: Never enter your Tumblr password unless \u201chttps://www.tumblr.com/login\u201d\x0ais the address in your web browser.\x0a\x0aYou should also see a green \u201cTumblr, Inc.\u201d identification in the address bar.\x0a\x0aSpammers and other bad guys use fake forms to steal passwords.\x0a\x0aTumblr will never ask you to log in from a user\u2019s blog.\x0a\x0aAre you absolutely sure you want to continue?';</script><script type="text/javascript" language="javascript" src="http://assets.tumblr.com/assets/scripts/pre_tumblelog.js?_v=75ff60d174af47d7ea271d82d4fe1151"></script>
<!DOCTYPE html>

<html>
<head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# blog: http://ogp.me/ns/blog#">
	<meta name="author" content="Joey Pfeifer" http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>Tumblr Engineering</title>
	<!--[if IE]>
	<script src="http://static.tumblr.com/sd4dp5h/Anem307e8/ie.js" type="text/javascript"></script>
	<![endif]-->
	<style type="text/css">figure {margin: 0;}</style>
<link rel="icon" href="http://33.media.tumblr.com/avatar_a5e216173cf5_128.png" />
	<link rel="alternate" type="application/rss+xml" title="RSS" href="http://engineering.tumblr.com/rss"/>
	<link rel="stylesheet" href="http://static.tumblr.com/ehm1tdz/xlrmkqolj/styles.css" type="text/css">
	
	<meta name="description" content="Dispatches from the intrepid tinkerers behind technology at Tumblr." />
	
	
	<style type="text/css">
		body {
			background: #eeeeee;
		}
		h1 a,
		h1 a:hover, 
		h1 a:visited,
		h1 a:active {
			color: #666666;
		}
		a,
		.meta_data a:hover,
		.meta_data a:focus {
			color: #4ea8d7;
		}
		#posts li.link a.content {
			background-color: #4ea8d7;
			color: #ffffff;
		}
		#posts li.link a:hover.content {
			color: #ffffff;
		}
		#posts .post_content ul li {
			list-style-type:circle;
		}
		a:active,
		.meta_data a:active {
			color: #2f9dd6;
		}
		header a,
		.pagination a,
		#posts li.text h2 a {
			color: #666666;
		}
		#posts li.quote q.content {
			background-color: #ffffe0;
			color: {color:Quote text;}
		}
		footer nav a,
		footer .copyright {
			color: #999999;
		}
		.post_content img, .caption img {
			max-width: 100%;
		}
		.post_content pre, .caption pre {
			overflow-x: auto;
			overflow-y: visible;
		}
		.post_content p, .caption p {
			margin-top: 11px;
			margin-bottom: 11px;
		}

		

		ul.the_crew li:nth-child(2) {
  display: none;
}

a.heart_big {
	-webkit-transition-timing-function: ease-out;
	-webkit-transition-duration: 75ms;
	display: inline-block;
	height: 14px;
	margin: 0;
	text-indent: -9999px;
	opacity: .25;
	width: 16px;	
	-moz-border-radius-topleft: 0px;
	-moz-border-radius-topright: 3px;
	-moz-border-radius-bottomright: 3px;
	-moz-border-radius-bottomleft: 0px;
	-webkit-border-radius: 0px 3px 3px 0px;
	border-radius: 0px 3px 3px 0px;
	background: transparent url('http://static.tumblr.com/sd4dp5h/WJYm301uv/like.png') no-repeat 0 0;
	float: left;
	background-size: 14px 14px;
}

a:hover.heart_big {
	-webkit-transition-timing-function: ease-out;
	-webkit-transition-duration: 75ms;
	opacity: .50;
}
	</style>
<link rel="alternate" href="android-app://com.tumblr/tumblr/x-callback-url/blog?blogName=engineering" />
<script src="http://assets.tumblr.com/assets/scripts/tumblelog.js?_v=a4169182721d644dacd145af89115b95"></script>

<meta http-equiv="x-dns-prefetch-control" content="off"/>
<meta name="keywords" content="engineering,gifs,tumblr engineering,scale,bits" />

<!-- BEGIN TUMBLR FACEBOOK OPENGRAPH TAGS --><!-- If you'd like to specify your own Open Graph tags, define the og:url and og:title tags in your theme's HTML. --><!-- Read more: http://ogp.me/ --><meta property="fb:app_id" content="48119224995" /><meta property="og:title" content="Tumblr Engineering" /><meta property="og:url" content="http://engineering.tumblr.com/?og=1" /><meta property="og:description" content="Dispatches from the intrepid tinkerers behind technology at Tumblr." /><meta property="og:type" content="tumblr-feed:tumblelog" /><meta property="og:image" content="http://33.media.tumblr.com/avatar_a5e216173cf5_128.png" /><meta property="al:ios:url" content="tumblr://x-callback-url/blog?blogName=engineering" /><meta property="al:ios:app_name" content="Tumblr" /><meta property="al:ios:app_store_id" content="305343404" /><meta property="al:android:url" content="tumblr://x-callback-url/blog?blogName=engineering" /><meta property="al:android:app_name" content="Tumblr" /><meta property="al:android:package" content="com.tumblr" /><!-- END TUMBLR FACEBOOK OPENGRAPH TAGS -->


<!-- TWITTER TAGS --><meta charset="utf-8"><meta name="twitter:site" content="tumblr" /><meta name="twitter:card" content="summary" /><meta name="twitter:title" content="engineering" /><meta name="twitter:description" content="Dispatches from the intrepid tinkerers behind technology at Tumblr." /><meta name="twitter:creator" content="tumblreng" /><meta name="twitter:app:name:iphone" content="Tumblr" /><meta name="twitter:app:name:ipad" content="Tumblr" /><meta name="twitter:app:name:googleplay" content="Tumblr" /><meta name="twitter:app:id:iphone" content="305343404" /><meta name="twitter:app:id:ipad" content="305343404" /><meta name="twitter:app:id:googleplay" content="com.tumblr" /><meta name="twitter:app:url:iphone" content="tumblr://x-callback-url/blog?blogName=engineering&amp;referrer=twitter-cards" /><meta name="twitter:app:url:ipad" content="tumblr://x-callback-url/blog?blogName=engineering&amp;referrer=twitter-cards" /><meta name="twitter:app:url:googleplay" content="tumblr://x-callback-url/blog?blogName=engineering&amp;referrer=twitter-cards" />

<!-- GOOGLE CAROUSEL --><script type="application/ld+json">{"@type":"ItemList","url":"http:\/\/engineering.tumblr.com","itemListElement":[{"@type":"ListItem","position":1,"url":"http:\/\/engineering.tumblr.com\/post\/118948866574\/bookends-and-remember"},{"@type":"ListItem","position":2,"url":"http:\/\/engineering.tumblr.com\/post\/117785769064\/nullability-and-inherited-initializers-in"},{"@type":"ListItem","position":3,"url":"http:\/\/engineering.tumblr.com\/post\/111496136159\/bug-bounty-program-update"},{"@type":"ListItem","position":4,"url":"http:\/\/engineering.tumblr.com\/post\/109401621999\/tumblr-bits-to-gifs"},{"@type":"ListItem","position":5,"url":"http:\/\/engineering.tumblr.com\/post\/108847447179\/genesis-a-tool-for-data-center-automation"},{"@type":"ListItem","position":6,"url":"http:\/\/engineering.tumblr.com\/post\/104183063334\/jeff-wang-my-summer-at-tumblr-this-summer-i-was"},{"@type":"ListItem","position":7,"url":"http:\/\/engineering.tumblr.com\/post\/102906359034\/colossus-a-new-service-framework-from-tumblr"},{"@type":"ListItem","position":8,"url":"http:\/\/engineering.tumblr.com\/post\/101776401859\/matt-schallert-my-summer-at-tumblr-this-summer-i"},{"@type":"ListItem","position":9,"url":"http:\/\/engineering.tumblr.com\/post\/98331642904\/sam-giddins-my-summer-at-tumblr-this-summer-i"},{"@type":"ListItem","position":10,"url":"http:\/\/engineering.tumblr.com\/post\/98050002584\/megan-belzner-my-summer-at-tumblr-this-summer-i"}],"@context":"http:\/\/schema.org"}</script>
</head>
<body id="staff">
	<div id="container">
		<div class="permalink">
			<header>
				
				<h1 class="badge"><a href="/"><img src="http://static.tumblr.com/dbcxhwx/lQ7m5bev3/engineering.png" width="160" alt="Tumblr Engineering" class="badge" /></a></h1>
				
			</header>
		</div>
		<aside>
			
			<h1 class="badge"><a href="/"><img src="http://static.tumblr.com/dbcxhwx/lQ7m5bev3/engineering.png" width="160" alt="Tumblr Engineering" class="badge" /></a></h1>
			
			
			<h1><a href="/">Tumblr Engineering</a></h1>
			
			
			<p class="description">Dispatches from the intrepid tinkerers behind technology at Tumblr.</p>
			
			
			<nav>
				<ul>
					
					<li><a href="/archive">Archive</a></li>
					
					
					
					
					
					
					
					
					
					
				</ul>
			</nav>
		</aside>
	
		<section id="content">
			<div id="inner">
				
				<ul id="posts">
					
					<li class="post text tumblr_android_app engineering">
		
						
						<div class="post_content">
							<h2><a href="http://engineering.tumblr.com/post/118948866574/bookends-and-remember">Bookends and Remember</a></h2>
							<p>We&rsquo;ve open-sourced a couple of Android utilities that we use in the Tumblr app for Android. Check it out:</p><h2><a href="https://github.com/tumblr/Bookends">Bookends</a></h2><p>A UI widget that allows for headers and footers on lists backed by <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html">RecyclerView</a>.</p><p>As we were upgrading our app to migrate from ListView to RecyclerView, we found it kind of silly that RecyclerView doesn&rsquo;t support headers by default. So we built a little wrapper that&rsquo;ll do this for you.<br></p><h2><a href="https://github.com/tumblr/Remember">Remember</a></h2><p>An in-memory data store backed by shared preferences.</p><p><a href="http://developer.android.com/reference/android/content/SharedPreferences.html">SharedPreferences</a> are useful but since they&rsquo;re backed by disk, they can have unpredictable performance characteristics &ndash; you&rsquo;re not guaranteed to always be in memory, and in the case of write operations, you <b>have</b> to hit disk (possibly asynchronously) and remember what you wrote.</p><p>Remember takes care of that by putting a write-through cache in front of SharedPreferences. It also gives you a bunch of desirable consistency and concurrency characteristics &ndash; access can happen from any number of threads concurrently, and doing a write followed by a read will always return the value you just put. (Even if the value hasn&rsquo;t been written to disk yet).</p><hr><p>Both of these projects are open-sourced under the Apache license, and are available at our <a href="https://github.com/tumblr">Github page</a>. Let us know what you think!<br></p>
						</div>
						
		
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						<div class="meta_data">
							<div class="inner">
								<a href="http://michael-lightwave.tumblr.com/"><img class="avatar" src="http://38.media.tumblr.com/avatar_d08e3be9daf3_64.png" /></a>
								<div class="content">
									
									<p class="date"><a href="http://engineering.tumblr.com/post/118948866574/bookends-and-remember">May 14, 2015</a></p>
									
									
									
									
									<p class="author">Posted by <a href="http://michael-lightwave.tumblr.com/">michael-lightwave</a></p>
									<p class="notes"><a href="http://engineering.tumblr.com/post/118948866574/bookends-and-remember" class="heart_big"></a> <a href="http://engineering.tumblr.com/post/118948866574/bookends-and-remember">31</a></p> 
								</div>
							</div>
						</div>
						
					</li>
					
					<li class="post text reblog">
		
						
						<div class="post_content">
							<h2><a href="http://engineering.tumblr.com/post/117785769064/nullability-and-inherited-initializers-in">Nullability and Inherited Initializers in Objective-C</a></h2>
							<p><a class="tumblr_blog" href="http://cocoa.tumblr.com/post/117719761353/nullability-and-inherited-initializers-in-objective-c">cocoa</a>:</p>

<blockquote><p>Xcode 6.3 introduces a feature that many of us have wanted ever since the introduction of Swift; the ability to specify to the compiler whether a method argument can be nil. Apple calls this <a href="https://developer.apple.com/swift/blog/?id=25">nullability</a>. How does this impact how we currently implement Objective-C initializers?</p>

<p>One of the foundations of inheritance is that subclasses are <a href="http://en.wikipedia.org/wiki/Liskov_substitution_principle">required to conform to the interface of their superclass</a>. This interface acts as a contract, so that any place a superclass is used, a subclass can also be used.</p>

<p>Modern Objective-C has conventions around how initializers should be composed. Object initializers are broken into two groups: <a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/Initialization/Initialization.html#//apple_ref/doc/uid/TP40010810-CH6-SW3">designated initializers</a> - typically marked with <a href="https://developer.apple.com/library/prerelease/ios/releasenotes/ObjectiveC/ModernizationObjC/AdoptingModernObjective-C/AdoptingModernObjective-C.html#//apple_ref/doc/uid/TP40014150-CH1-SW8"><code>NS_DESIGNATED_INITIALIZER</code></a> - are responsible for calling their superclass&rsquo;s initializer, and convenience initializers typically call an initializer on the same class. Subclasses should override their superclasses&rsquo; designated initializers, but not their convenience initializers. This provides a clear path of initialization, but there are a few problems.</p>

<p>Lots of Foundation objects (for example, <code>NSObject</code>) do not have designated initializers specified, so subclasses are not warned by the compiler to override them. To developers familiar with Cocoa development, it&rsquo;s obvious that <code>-[NSObject init]</code> is the designated initializer, but without marking it with <code>NS_DESIGNATED_INITIALIZER</code>, the compiler can&rsquo;t guarantee that calling <code>-init</code> on a <code>NSObject</code> subclass will eventually call <code>-[NSObject init]</code>. Marking Foundation initializers as designated would go a long way towards making initialization less of a headache.</p>

<p>Overriding a superclass&rsquo;s designated initializer often requires passing some default values for these arguments. However, sometimes it&rsquo;s not possible to provide good default values in convenience initializers to funnel through to the designated initializer. Let&rsquo;s assume that <code>-[UIView initWithFrame:]</code> and <code>-[UIImageView initWithImage:]</code> are both designated initializers. <code>UIImageView</code> must override <code>-initWithFrame:</code> and call <code>[self initWithImage:]</code>. What should the default image be? If it&rsquo;s <code>nil</code>, the <code>CGRect</code> provided to <code>-initWithFrame:</code> is lost.</p>

<p>That&rsquo;s an easy problem to fix. <code>-[UIImageView initWithImage:]</code> should accept a <code>__nonnull</code> image. It&rsquo;s easy to envision a UIKit update that modifies the <code>UIImageView</code> header to read: <code>-(nullable instancetype) initWithImage:(UIImage * __nonnull)image NS_DESIGNATED_INITIALIZER;</code>. However, now it&rsquo;s much harder to provide default values when overriding <code>UIView</code>&rsquo;s designated initializer because a <code>nil</code> <code>UIImage</code> can no longer be passed to <code>-initWithImage:</code>.</p>

<p>To get around this issue, some Apple Frameworks override initializers and throw an exception at runtime. Just try calling <code>id crash = [[NSManagedObject alloc] init];</code> and you&rsquo;ll see <code>CoreData: error: Failed to call designated initializer on NSManagedObject class 'NSManagedObject&rsquo;</code>. This breaks the paradigm of convenience initializers, and it breaks the contract provided by the superclass.</p>

<p>There should be a better way to fix this. If Apple Frameworks can break inheritance at runtime, why not break it at compile time? At Tumblr, we&rsquo;ve created a macro to break inheritance where necessary at compile time.</p>

<p><code>#define TM_METHOD_UNAVAILABLE(alternative) __attribute__((unavailable("Please use " alternative " instead.")))</code></p>

<p>This provides compile time safeguards against 99% of the cases where objects are being initialized, but, because of inheritance and the dynamic nature of Objective-C, there are some cases where the compiler can&rsquo;t catch calling an invalid initializer. For example, if <code>-[TMBlog init]</code> is marked unavailable, <code>id blog = [TMBlog alloc]; [blog init];</code> will still compile. We want to mimic Apple Frameworks behavior and crash if something like this happens, because it could cause irreparable local data corruption. To protect against these cases, we override the unavailable designated initializers of the superclass and throw an exception.</p>

<p>After careful consideration, we&rsquo;ve settled on this solution:</p>

<p><code>
#define TM_INVALID_INITIALIZER_BEGIN \<br>
&nbsp;&nbsp;_Pragma("clang diagnostic push") \<br>
&nbsp;&nbsp;_Pragma("clang diagnostic ignored "-Wobjc-designated-initializers"")<br><br>
#define TM_INVALID_INITIALIZER_END \<br>
&nbsp;&nbsp;_Pragma("clang diagnostic pop") \<br><br>
#define __TM_INVALID_INITIALIZER_REASON \<br>
&nbsp;&nbsp;[NSString stringWithFormat:@"The initializer %s is not available.", PRETTY_FUNCTION]<br><br>
#define TM_INVALID_INITIALIZER_RETURN_VALUE \<br>
&nbsp;&nbsp;({ \<br>
&nbsp;&nbsp;&nbsp;&nbsp;@throw [[NSException alloc] initWithName:@"Invalid initializer" reason:__TM_INVALID_INITIALIZER_REASON userInfo:nil]; \<br>
&nbsp;&nbsp;&nbsp;&nbsp;nil; \<br>
&nbsp;&nbsp;});<br><br>
@implementation TMBlog<br><br>
// ... valid initializers<br><br>
TM_INVALID_INITIALIZER_BEGIN<br>
-(nullable instancetype)init {<br>
&nbsp;&nbsp;return TM_INVALID_INITIALIZER_RETURN_VALUE;<br>
}<br>
TM_INVALID_INITIALIZER_END<br><br>

// ... other implementation<br><br>
@end<br></code></p>

<p>This will look pretty familiar to people that have read <a href="http://petersteinberger.com/blog/2015/uitableviewcontroller-designated-initializer-woes/">Peter Steinberger&rsquo;s blog post on UITableViewController designated initializers</a>. We decided that it&rsquo;s better to throw an exception in the invalid initializers, because we have assertions turned off for release builds.</p></blockquote>

<p>Written by our very own <a class="tumblelog" href="http://tmblr.co/mebQDhJsLeVhqb42xUuFt-A">paulrehkugler</a><br></p>
						</div>
						
		
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						<div class="meta_data">
							<div class="inner">
								<a href="http://tumblr.johnbunting.me/"><img class="avatar" src="http://38.media.tumblr.com/avatar_378ef9819c7f_64.png" /></a>
								<div class="content">
									
									<p class="date"><a href="http://engineering.tumblr.com/post/117785769064/nullability-and-inherited-initializers-in">April 30, 2015</a></p>
									
									
									
									
									<p class="author">Posted by <a href="http://tumblr.johnbunting.me/">codingjester</a></p>
									<p class="notes"><a href="http://engineering.tumblr.com/post/117785769064/nullability-and-inherited-initializers-in" class="heart_big"></a> <a href="http://engineering.tumblr.com/post/117785769064/nullability-and-inherited-initializers-in">27</a></p> 
								</div>
							</div>
						</div>
						
					</li>
					
					<li class="post text ">
		
						
						<div class="post_content">
							<h2><a href="http://engineering.tumblr.com/post/111496136159/bug-bounty-program-update">Bug Bounty program update!</a></h2>
							<p>It&rsquo;s been a little over a year since we launched our&nbsp;<a href="https://www.tumblr.com/docs/en/bug_bounty">bug bounty</a> program here at Tumblr. &nbsp;You&rsquo;ve sent us some really great submissions and we&rsquo;ve paid you in return. &nbsp;Well, inflation is a thing, so we felt it was only fair to raise our payouts as well. &nbsp;To help keep you interested in securing Tumblr, we&rsquo;re doubling our payouts for qualifying security bugs, effective this week. &nbsp;Check out the <a href="https://www.tumblr.com/docs/en/bug_bounty">rules</a>, go hunting, and then head on over to <a href="https://www.tumblr.com/security">https://www.tumblr.com/security</a>&nbsp;to tell us what you found!<br></p><p>One final point on the program - providing detailed information works in your favor. &nbsp;Think outside the box and send us scenarios in which your bugs could actually be exploited, not just that they exist and are against best practices.</p><p>Good luck!<br></p>
						</div>
						
		
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						<div class="meta_data">
							<div class="inner">
								<a href="http://crushallhumans.tumblr.com/"><img class="avatar" src="http://38.media.tumblr.com/avatar_c0afe1ac0321_64.png" /></a>
								<div class="content">
									
									<p class="date"><a href="http://engineering.tumblr.com/post/111496136159/bug-bounty-program-update">February 19, 2015</a></p>
									
									
									
									
									<p class="author">Posted by <a href="http://crushallhumans.tumblr.com/">crushallhumans</a></p>
									<p class="notes"><a href="http://engineering.tumblr.com/post/111496136159/bug-bounty-program-update" class="heart_big"></a> <a href="http://engineering.tumblr.com/post/111496136159/bug-bounty-program-update">24</a></p> 
								</div>
							</div>
						</div>
						
					</li>
					
					<li class="post link sre tumblr how_it_works bits gifs tumblr_engineering engineering scale">
		
						
		
						
						
						
						
						
						<a href="http://www.infoq.com/presentations/tumblr-services"  class="content">Tumblr - Bits to Gifs</a>
						
						<div class="caption">
							<blockquote class="link_og_blockquote">John Bunting talks about different services Tumblr has built and how their architecture helps them be fault tolerant as they continue to grow.<br></blockquote><p>John Bunting talks about different services Tumblr has built and how their architecture helps them be fault tolerant as they continue to grow.</p><p>You are looking at a Tumblr post, so you love GIFs. You are reading an engineering post, so you love bits. Have you ever wanted to know how Tumblr turns these bits into GIFs? Thanks to <a href="http://www.infoq.com/">QCon</a>, you can watch cyborg hacker&nbsp;<a href="http://tmblr.co/mAmgsbBR1y8VRT9y71VUc6Q">codingjester</a> talk about how its done.</p>
						</div>
						
						
						
						
						
						
						
						
						
						
						
						
						<div class="meta_data">
							<div class="inner">
								<a href="http://benedict.zosima.org/"><img class="avatar" src="http://33.media.tumblr.com/avatar_ec73d0cd169c_64.png" /></a>
								<div class="content">
									
									<p class="date"><a href="http://engineering.tumblr.com/post/109401621999/tumblr-bits-to-gifs">January 28, 2015</a></p>
									
									
									
									
									<p class="author">Posted by <a href="http://benedict.zosima.org/">michaelbenedict</a></p>
									<p class="notes"><a href="http://engineering.tumblr.com/post/109401621999/tumblr-bits-to-gifs" class="heart_big"></a> <a href="http://engineering.tumblr.com/post/109401621999/tumblr-bits-to-gifs">46</a></p> 
								</div>
							</div>
						</div>
						
					</li>
					
					<li class="post text ">
		
						
						<div class="post_content">
							<h2><a href="http://engineering.tumblr.com/post/108847447179/genesis-a-tool-for-data-center-automation">Genesis - a tool for data center automation</a></h2>
							<p><a href="http://tumblr.github.io/genesis/">Genesis</a> is a tool for data center automation. The primary motivation for developing Genesis at Tumblr was to streamline the process of discovering new machines and reporting their hardware details to <a href="https://github.com/tumblr/collins">Collins</a>, our inventory management system, without having to do a bunch of data entry by hand. In addition, we&rsquo;ve also extended Genesis to be a convenient way to do hardware configuration such as altering BIOS settings and configuring RAID cards before provisioning an operating system on to the host. It has replaced an older system which was a collection of shell scripts. Being written in a ruby DSL has enabled a more flexible, easy to understand, and easy to maintain system that more of the staff can use and extend.</p><p>Genesis consists of a stripped down linux image suitable to boot by PXE and a ruby DSL for describing tasks to be executed on the host. Genesis includes a test environment to ease development and code to build the linux image.</p><p>Genesis was developed by the Site Reliability Engineering and Data center teams at Tumblr. I&rsquo;m happy to announce that Genesis is now open-sourced under the Apache License and is available on <a href="https://github.com/tumblr/genesis">Github</a>.</p><p>We need your help!. Genesis is still in the early stages of development and while we&rsquo;ve met many of the goals we set out to achieve, there&rsquo;s still much to be done. If you find a bug or have a cool idea, let us know and get involved by contributing <a href="https://github.com/tumblr/genesis/blob/master/CONTRIBUTING.md">code and documentation</a> or participating with <a href="https://groups.google.com/forum/#!forum/tumblr-genesis-users">questions and suggestions</a>.<br></p>
						</div>
						
		
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						<div class="meta_data">
							<div class="inner">
								<a href="http://yl3w.tumblr.com/"><img class="avatar" src="http://33.media.tumblr.com/avatar_27a359625e77_64.png" /></a>
								<div class="content">
									
									<p class="date"><a href="http://engineering.tumblr.com/post/108847447179/genesis-a-tool-for-data-center-automation">January 22, 2015</a></p>
									
									
									
									
									<p class="author">Posted by <a href="http://yl3w.tumblr.com/">yl3w</a></p>
									<p class="notes"><a href="http://engineering.tumblr.com/post/108847447179/genesis-a-tool-for-data-center-automation" class="heart_big"></a> <a href="http://engineering.tumblr.com/post/108847447179/genesis-a-tool-for-data-center-automation">51</a></p> 
								</div>
							</div>
						</div>
						
					</li>
					
					<li class="post photo ">
		
						
		
						
						<div class="media_container">
							<div class="photo_container">
								<div class="shadow"></div>
								<a href="http://engineering.tumblr.com/image/104183063334"><img src="http://40.media.tumblr.com/19365ba16dce5fee85a73a5dd9d7665d/tumblr_nej48pzQQJ1qjk2rvo1_1280.jpg" class="photo" alt="Jeff Wang: My Summer at TumblrThis summer I was blessed with the opportunity of working as a product engineering intern on the Dashboard team. I love my team so much because we got to build features that every user directly interacts with whenever they go on Tumblr.Having never worked in a similar environment before, especially on a product of Tumblr&rsquo;s scale, I spent a majority of my time familiarizing myself with the software development process. I got to experience, from a first-hand perspective, how ideas form, how teams work together, and how caffeine turns into software.My first project was the keyboard shortcut guide, an idea that began as a bit of an inside joke. This is a reference sheet with several keyboard shortcuts to improve the browsing experience. (Most people, even a few who work here, didn&rsquo;t know there was a shortcut to make a new post!) It can be opened from the side of the screen by simply hitting &ldquo;shift + /&rdquo; (or &ldquo;?&rdquo;) anywhere on a dashboard-like page. I had a blast building this because I was involved in every step of process. It was my first time working with Backbone.js, or any JavaScript MVC framework. It was intimidating to build something from scratch while making sure it interacted properly with several existing features. I also learned about robust design patterns because I had to build a component that future components could easily branch off of. After fleshing out a working prototype, I spent a decent amount of time QAing to make sure I got everything right by testing across different browsers and platforms. After seeing the keyboard shortcut guide progress from a simple idea to a key (no pun intended) feature of the dashboard, I felt a strong sense of ownership of the product.Our next project, the dashboard redesign, turned out to be a major team effort. We rolled in a fresh new background color, built a sticky header from which users can create a post without having to scroll to the top of the page, and made images stretch to the full width of a post. This involved reimplementing the old features to make them more modular, and restyling a large chunk of the site in SASS. I worked closely with the design team to deliver ideas as code, exploring different JavaScript and CSS3 animations. I also worked closely with my team to tackle each part of the site in a way that ensured our code was reusable. The project gave me a crash course of Tumblr&rsquo;s history in code, and a macroscopic understanding of its front-end.I was also very fortunate to be here for our net neutrality campaign. My team took over the Dashboard and created a form that urged users to call and email their senators. Specifically, I helped with styling the forms and making sure it ran smoothly with the rest of the site. This was incredibly exciting because we played a direct role in Tumblr&rsquo;s social impact, and our work was featured on major news outlets.Tumblr has always been special to me as I&rsquo;ve actively used it since I was in high school. To actually be able to contribute to a product I love so much is a dream come true. Hanging out with other interns, working with my team, and living in New York has been a surreal experience. My only gripe is that it went by so fast.I want to thank Jake (jaykillah) for helping me whenever I bugged him, and the rest of my team for putting up with my bad jokes. I will miss all the cool, talented people I met here this summer."></a>
							</div>
						</div>
						
						<div class="caption">
							<h2><b><a href="http://jeffreythewang.tumblr.com">Jeff Wang: My Summer at Tumblr</a></b></h2><p>This summer I was blessed with the opportunity of working as a product engineering intern on the Dashboard team. I love my team so much because we got to build features that every user directly interacts with whenever they go on Tumblr.</p><p>Having never worked in a similar environment before, especially on a product of Tumblr&rsquo;s scale, I spent a majority of my time familiarizing myself with the software development process. I got to experience, from a first-hand perspective, how ideas form, how teams work together, and how caffeine turns into software.</p><p>My first project was the <a href="http://staff.tumblr.com/post/94069251335/what-does-hitting-shift-in-your-dashboard-do">keyboard shortcut guide</a>, an idea that began as a bit of an inside joke. This is a reference sheet with several keyboard shortcuts to improve the browsing experience. (Most people, even a few who work here, didn&rsquo;t know there was a shortcut to make a new post!) It can be opened from the side of the screen by simply hitting &ldquo;shift + /&rdquo; (or &ldquo;?&rdquo;) anywhere on a dashboard-like page. I had a blast building this because I was involved in every step of process. It was my first time working with Backbone.js, or any JavaScript MVC framework. It was intimidating to build something from scratch while making sure it interacted properly with several existing features. I also learned about robust design patterns because I had to build a component that future components could easily branch off of. After fleshing out a working prototype, I spent a decent amount of time QAing to make sure I got everything right by testing across different browsers and platforms. After seeing the keyboard shortcut guide progress from a simple idea to a key (no pun intended) feature of the dashboard, I felt a strong sense of ownership of the product.</p><br><p>Our next project, the dashboard redesign, turned out to be a major team effort. We rolled in a fresh new background color, built a sticky header from which users can create a post without having to scroll to the top of the page, and made images stretch to the full width of a post. This involved reimplementing the old features to make them more modular, and restyling a large chunk of the site in SASS. I worked closely with the design team to deliver ideas as code, exploring different JavaScript and CSS3 animations. I also worked closely with my team to tackle each part of the site in a way that ensured our code was reusable. The project gave me a crash course of Tumblr&rsquo;s history in code, and a macroscopic understanding of its front-end.</p><p>I was also very fortunate to be here for our <a href="http://staff.tumblr.com/post/97238609065/incredible-work-everyone-these-numbers-are">net neutrality</a> campaign. My team took over the Dashboard and created a form that urged users to call and email their senators. Specifically, I helped with styling the forms and making sure it ran smoothly with the rest of the site. This was incredibly exciting because we played a direct role in Tumblr&rsquo;s social impact, and our work was featured on <a href="http://www.theverge.com/2014/9/12/6137619/as-the-wheel-turns-inside-tumblr-and-the-battle-for-net-neutrality">major news outlets</a>.</p><br><p>Tumblr has always been special to me as I&rsquo;ve actively used it since I was in high school. To actually be able to contribute to a product I love so much is a dream come true. Hanging out with other interns, working with my team, and living in New York has been a surreal experience. My only gripe is that it went by so fast.</p><p>I want to thank Jake (<a class="tumblelog" href="http://tmblr.co/muZ6_984utNmRwmgVY9XIzQ">jaykillah</a>) for helping me whenever I bugged him, and the rest of my team for putting up with my bad jokes. I will miss all the cool, talented people I met here this summer.</p>
						</div>
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						<div class="meta_data">
							<div class="inner">
								<a href="http://reneeejp.tumblr.com/"><img class="avatar" src="http://33.media.tumblr.com/avatar_4db54c5101c9_64.png" /></a>
								<div class="content">
									
									<p class="date"><a href="http://engineering.tumblr.com/post/104183063334/jeff-wang-my-summer-at-tumblr-this-summer-i-was">December 2, 2014</a></p>
									
									
									
									
									<p class="author">Posted by <a href="http://reneeejp.tumblr.com/">reneeejp</a></p>
									<p class="notes"><a href="http://engineering.tumblr.com/post/104183063334/jeff-wang-my-summer-at-tumblr-this-summer-i-was" class="heart_big"></a> <a href="http://engineering.tumblr.com/post/104183063334/jeff-wang-my-summer-at-tumblr-this-summer-i-was">95</a></p> 
								</div>
							</div>
						</div>
						
					</li>
					
					<li class="post text ">
		
						
						<div class="post_content">
							<h2><a href="http://engineering.tumblr.com/post/102906359034/colossus-a-new-service-framework-from-tumblr">Colossus: A New Service Framework from Tumblr</a></h2>
							<p>One of the biggest challenges we continue to face at Tumblr is how to properly organize and scale our infrastructure as the platform continues to grow.  One strategy that has been very promising is the implementation of microservices.  These are small, specialized applications designed to efficiently encapsulate a single feature or component.  Instead of having one monolithic application that contains the entire site&rsquo;s business logic, the clean separation of responsibilities provided by microservices helps facilitate a well-organized infrastructure as well as making it easier to address bugs and performance bottlenecks.</p>

<p>While microservices offer plenty of advantages, they come with their own set of challenges.  Microservices need to be easy to build, maintain, deploy, and monitor, and on top of that they need to be extremely high-performing and fault-tolerant.  A single service may serve tens or hundreds of thousands of requests per second with strict requirements on latency and uptime.</p>

<p><a href="http://tumblr.github.io/colossus/">Colossus</a> is a new framework developed at Tumblr which addresses these challenges.  It offers a lightweight, straightforward model for building high-performing microservices.  Written in Scala and built on NIO and the Akka actor framework, Colossus has had a huge impact on the way we build services at Tumblr.</p>

<p>Microservices are not new to Tumblr, but in the past we&rsquo;ve had difficulty writing services in terms of performance, stability, and maintainability.  Building a service was a major undertaking and was limited to only a handful of engineers who had built up the necessary domain knowledge to effectively write them.  Colossus has completely changed that picture, making it easier to develop services that are fast and fault-tolerant out of the box, greatly lowering the barrier to entry.</p>

<p>Our past experience in building services led to two main goals with Colossus:</p>

<p><strong>Performance</strong></p>

<p>By far the most important goal is that an application written in Colossus should basically be as fast as if it was written directly on NIO without any framework.  This is largely because Colossus was designed to encapsulate the I/O layer of a service that <em>was</em> directly written on NIO, which in turn was written that way because of performance problems we faced with existing frameworks we tried.   Thus we wanted to ensure that refactoring onto a framework wouldn&rsquo;t incur a performance hit in the process.</p>

<p>The general structure of a microservice is that it concurrently processes small requests from potentially many clients and keeps little to no internal state.  The reactor pattern, which uses single-threaded event loops to multiplex client TCP connections, is ideal for this situation.  Thus for Colossus we aimed to build a clean implementation of this model with as little overhead as possible.  In many cases entire services can be written without code ever leaving the event loop, and in cases where we do need true parallelism, using Futures and Akka actors is easy and efficient.</p>

<p>This hybrid actor/reactor model has ensured that Colossus meets the performance requirements we need.  We&rsquo;ve benchmarked Colossus services at millions of requests per second and some of our production services using Colossus have handled hundreds of billions of requests with the 99.99th percentile latency under 5ms.</p>

<p><strong>Simplicity</strong></p>

<p>The other major goal is to ensure that Colossus is a small, focused framework with as low of a barrier to entry as possible.</p>

<p>Simplicity comes in two related but different flavors: simplicity of the framework and simplicity of applications using the framework.  Simplicity of the framework comes from the fact the Colossus is largely focused on just microservices.  While the core of Colossus is a fully generalized wrapper on NIO, most of our efforts have gone into the microservice use case, which lets us keep the code base small and straightforward.</p>

<p>Simplicity of the application largely depends on how the framework presents its API.  In this case we are heavily taking advantage of the fact the Colossus is written in Scala.  One of the biggest benefits of Scala is the ability write incredibly expressive code and design simple DSL&rsquo;s with minimal boilerplate.  Furthermore, because Scala places a heavy emphasis on type safety and functional programming, we wanted to ensure that Colossus reflected these principles as much as possible.  This leads to being able to write applications more concisely such that the focus can stay on the business logic and not the boilerplate.</p>

<p>These principles have allowed Colossus to become a fundamental part of Tumblr&rsquo;s infrastructure, and has put us on the path to a more service-oriented architecture.</p>

<p>I&rsquo;m happy to announce that Colossus is now open-sourced under the Apache License and is available on <a href="https://github.com/tumblr/colossus">Github</a>.  While it is still a work in progress and we are releasing it as a pre-1.0 version, Colossus has already significantly improved the way we build services at Tumblr and we are currently leveraging Colossus in production for several back-end systems with great success.  So take a look, try it out, and let us know what you think!</p>
						</div>
						
		
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						<div class="meta_data">
							<div class="inner">
								<a href="http://macrodan.tumblr.com/"><img class="avatar" src="http://38.media.tumblr.com/avatar_9322e5ced9bd_64.png" /></a>
								<div class="content">
									
									<p class="date"><a href="http://engineering.tumblr.com/post/102906359034/colossus-a-new-service-framework-from-tumblr">November 17, 2014</a></p>
									
									
									
									
									<p class="author">Posted by <a href="http://macrodan.tumblr.com/">macrodan</a></p>
									<p class="notes"><a href="http://engineering.tumblr.com/post/102906359034/colossus-a-new-service-framework-from-tumblr" class="heart_big"></a> <a href="http://engineering.tumblr.com/post/102906359034/colossus-a-new-service-framework-from-tumblr">129</a></p> 
								</div>
							</div>
						</div>
						
					</li>
					
					<li class="post photo ">
		
						
		
						
						<div class="media_container">
							<div class="photo_container">
								<div class="shadow"></div>
								<a href="http://engineering.tumblr.com/image/101776401859"><img src="http://41.media.tumblr.com/c8f234698609ddf21e0f63801c8e99dd/tumblr_nc05xv59oa1qjk2rvo1_1280.jpg" class="photo" alt="Matt Schallert: My Summer at TumblrThis summer I had the amazing opportunity to work as an EngineeringIntern at Tumblr. Having done two previous internships I thought Iknew what to expect, but Tumblr was a whole new awesome experiencethat far exceeded any of my expectations.The team I worked on is called the SRE Systems team. SRE stands forSite Reliability Engineering, and is generally responsible for makingsure Tumblr is always up and running at peak performance. At Tumblr,SRE is divided into three areas with the Systems team overseeingTumblr&amp;rsquo;s infrastructure and the tools that drive it.Since the SRE team has to make sure that everything is always workingas it should be, the task of monitoring Tumblr&amp;rsquo;s various systems is animportant one. Anything that&amp;rsquo;s involved in making the site work needsto be monitored, whether that&amp;rsquo;s making sure a server is running allthe processes it should be or checking that the third-party APIs usedby the site are working correctly.At Tumblr a tool called Icinga is used for monitoring. However justhaving Icinga installed isn&amp;rsquo;t that useful unless it&amp;rsquo;s properlyconfigured to monitor what you want it to. The problem of generatingthose configurations is what I got to work on for the first part of mysummer. While generating some config files may sound straightforward,it turns out to be more complicated in practice and was a funchallenge to work on. The service I created also offered performanceand reliability improvements over the previous tool used for the task,and getting to see those improvements take effect was reallyrewarding.For the rest of my summer I got to work on planning the migration toIcinga 2, which is a ground-up rewrite of the original version(written back in the early 2000&amp;rsquo;s) and offers a lot of improvements.Icinga 2 is going to allow Tumblr to have much better insight into thehealth of its infrastructure, and if nothing else will save engineersa lot of headache from clicking around a web interface created over 10years ago!Overall my summer at Tumblr was an absolutely incredible experience.There&amp;rsquo;s something really powerful about being a part of a companywhere everyone is passionate about the same mission of helpingcreators make their best content and get it out to the world. And as Isit in the library back at CMU working my way through problem sets andclass projects, there&amp;rsquo;s no place I&amp;rsquo;d rather be than back at the officewith &amp;ldquo;Fuck Yeah!&amp;rdquo; doormats and a never-ending supply of cold brewcoffee."></a>
							</div>
						</div>
						
						<div class="caption">
							<h2>Matt Schallert: My Summer at Tumblr</h2><div><p>This summer I had the amazing opportunity to work as an Engineering<br>Intern at Tumblr. Having done two previous internships I thought I<br>knew what to expect, but Tumblr was a whole new awesome experience<br>that far exceeded any of my expectations.<br><br>The team I worked on is called the SRE Systems team. SRE stands for<br>Site Reliability Engineering, and is generally responsible for making<br>sure Tumblr is always up and running at peak performance. At Tumblr,<br>SRE is divided into three areas with the Systems team overseeing<br>Tumblr&rsquo;s infrastructure and the tools that drive it.<br><br>Since the SRE team has to make sure that everything is always working<br>as it should be, the task of monitoring Tumblr&rsquo;s various systems is an<br>important one. Anything that&rsquo;s involved in making the site work needs<br>to be monitored, whether that&rsquo;s making sure a server is running all<br>the processes it should be or checking that the third-party APIs used<br>by the site are working correctly.<br><br>At Tumblr a tool called Icinga is used for monitoring. However just<br>having Icinga installed isn&rsquo;t that useful unless it&rsquo;s properly<br>configured to monitor what you want it to. The problem of generating<br>those configurations is what I got to work on for the first part of my<br>summer. While generating some config files may sound straightforward,<br>it turns out to be more complicated in practice and was a fun<br>challenge to work on. The service I created also offered performance<br>and reliability improvements over the previous tool used for the task,<br>and getting to see those improvements take effect was really<br>rewarding.<br><br>For the rest of my summer I got to work on planning the migration to<br>Icinga 2, which is a ground-up rewrite of the original version<br>(written back in the early 2000&rsquo;s) and offers a lot of improvements.<br>Icinga 2 is going to allow Tumblr to have much better insight into the<br>health of its infrastructure, and if nothing else will save engineers<br>a lot of headache from clicking around a web interface created over 10<br>years ago!<br><br>Overall my summer at Tumblr was an absolutely incredible experience.<br>There&rsquo;s something really powerful about being a part of a company<br>where everyone is passionate about the same mission of helping<br>creators make their best content and get it out to the world. And as I<br>sit in the library back at CMU working my way through problem sets and<br>class projects, there&rsquo;s no place I&rsquo;d rather be than back at the office<br>with &ldquo;Fuck Yeah!&rdquo; doormats and a never-ending supply of cold brew<br>coffee.<br></p></div>
						</div>
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						<div class="meta_data">
							<div class="inner">
								<a href="http://reneeejp.tumblr.com/"><img class="avatar" src="http://33.media.tumblr.com/avatar_4db54c5101c9_64.png" /></a>
								<div class="content">
									
									<p class="date"><a href="http://engineering.tumblr.com/post/101776401859/matt-schallert-my-summer-at-tumblr-this-summer-i">November 4, 2014</a></p>
									
									
									
									
									<p class="author">Posted by <a href="http://reneeejp.tumblr.com/">reneeejp</a></p>
									<p class="notes"><a href="http://engineering.tumblr.com/post/101776401859/matt-schallert-my-summer-at-tumblr-this-summer-i" class="heart_big"></a> <a href="http://engineering.tumblr.com/post/101776401859/matt-schallert-my-summer-at-tumblr-this-summer-i">46</a></p> 
								</div>
							</div>
						</div>
						
					</li>
					
					<li class="post photo ">
		
						
		
						
						<div class="media_container">
							<div class="photo_container">
								<div class="shadow"></div>
								<a href="http://engineering.tumblr.com/image/98331642904"><img src="http://40.media.tumblr.com/fc576f290358def5f021b7a99032aa0c/tumblr_nc05ipn7h61qjk2rvo1_540.jpg" class="photo" alt="Sam Giddins: My Summer at TumblrThis summer, I had the immense pleasure of working on the Tumblr iOS app. From day one, I got to work with an incredible team on an incredible app writing production code. Over the course of nearly 100 pull requests, I managed to get my hands on almost every piece of the app, from design changes to code refactors to some sweet new features.The best part about the summer was working alongside multiple teams at Tumblr (iOS, Creative, API) making real, significant changes to one of the most polished apps on the App Store. When the summer started, I&amp;rsquo;d never written a custom animation, but after a few weeks I was helping to debug some of the fun things we do with CoreAnimation. Monday of my second week I found a bug in the API and got to spend a day looking through PHP code to help track that down. One Friday, I started work on some new things that will come out soon&amp;ndash;at 5 pm, on a whim. By Monday, I was demoing the changes to Peter Vidani. That sort of rapid feedback is incredible, and really made my experience at Tumblr a joy&amp;ndash;I got to make a real difference on the app.In addition to the code I wrote (which was a lot!), I got to work with the team on all of the other facets of the app development lifecycle, from the existential frustration of dealing with translations to setting up a CI build server. I review several hundred pull requests, and spent hours discussing code with brilliant collegues who were never hesitant to debate the intricacies of what we were working on.Throughout the summer, I was constantly in awe of the amazing work done at Tumblr every day. I&amp;rsquo;m proud to say that I got to contribute to the next few updates, and will forever cherish the experiences I had during my time at Tumblr HQ."></a>
							</div>
						</div>
						
						<div class="caption">
							<h2><a href="http://blog.segiddins.me/">Sam Giddins: My Summer at Tumblr</a></h2><div><p>This summer, I had the immense pleasure of working on the Tumblr iOS app. From day one, I got to work with an incredible team on an incredible app writing production code. Over the course of nearly 100 pull requests, I managed to get my hands on almost every piece of the app, from design changes to code refactors to some sweet new features.<br><br>The best part about the summer was working alongside multiple teams at Tumblr (iOS, Creative, API) making real, significant changes to one of the most polished apps on the App Store. When the summer started, I&rsquo;d never written a custom animation, but after a few weeks I was helping to debug some of the fun things we do with CoreAnimation. Monday of my second week I found a bug in the API and got to spend a day looking through PHP code to help track that down. One Friday, I started work on some new things that will come out soon&ndash;at 5 pm, on a whim. By Monday, I was demoing the changes to Peter Vidani. That sort of rapid feedback is incredible, and really made my experience at Tumblr a joy&ndash;I got to make a real difference on the app.<br><br>In addition to the code I wrote (which was a lot!), I got to work with the team on all of the other facets of the app development lifecycle, from the existential frustration of dealing with translations to setting up a CI build server. I review several hundred pull requests, and spent hours discussing code with brilliant collegues who were never hesitant to debate the intricacies of what we were working on.<br><br>Throughout the summer, I was constantly in awe of the amazing work done at Tumblr every day. I&rsquo;m proud to say that I got to contribute to the next few updates, and will forever cherish the experiences I had during my time at Tumblr HQ.<br><br></p></div>
						</div>
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						<div class="meta_data">
							<div class="inner">
								<a href="http://reneeejp.tumblr.com/"><img class="avatar" src="http://33.media.tumblr.com/avatar_4db54c5101c9_64.png" /></a>
								<div class="content">
									
									<p class="date"><a href="http://engineering.tumblr.com/post/98331642904/sam-giddins-my-summer-at-tumblr-this-summer-i">September 24, 2014</a></p>
									
									
									
									
									<p class="author">Posted by <a href="http://reneeejp.tumblr.com/">reneeejp</a></p>
									<p class="notes"><a href="http://engineering.tumblr.com/post/98331642904/sam-giddins-my-summer-at-tumblr-this-summer-i" class="heart_big"></a> <a href="http://engineering.tumblr.com/post/98331642904/sam-giddins-my-summer-at-tumblr-this-summer-i">47</a></p> 
								</div>
							</div>
						</div>
						
					</li>
					
					<li class="post photo ">
		
						
		
						
						<div class="media_container">
							<div class="photo_container">
								<div class="shadow"></div>
								<a href="http://engineering.tumblr.com/image/98050002584"><img src="http://40.media.tumblr.com/09552c5d09b7221d2409c3b42d046208/tumblr_nc05chwHhp1qjk2rvo1_1280.jpg" class="photo" alt="Megan Belzner: My Summer at TumblrThis summer I got the amazing opportunity to intern as a product engineer on the Creation team. I didn&rsquo;t really know what to expect when I first stepped in to the office, but whatever hopes and expectations I could have had, the summer far surpassed them.The Creation team is in charge of one of the most important parts of the Tumblr site - posting tools - and most of my summer was spent working with the others on the team to overhaul the code underlying that part of the site. Coming in at the beginning of the summer, I could count the number of times I had worked in an existing codebase on one hand - namely: once, maybe twice. But with the help of the incredible Creation team, I dove right in and started contributing bug fixes, updates, and even entire features. Starting in the very first week I was already writing and deploying code, fixing a bug with note counts and updating Tumblr&rsquo;s user engagement emails. By the end of the summer, I found myself getting ownership of pretty significant parts of the project. Even better, I had learned how to easily track down the source of a bug, figure out what this or that bit of code actually did, and navigate the figurative jungle of javascript.It was incredibly exciting and rewarding to work on such a central part of the Tumblr site, knowing that people are going to be using some of the code I wrote to make millions of posts a day. I learned a tremendous amount about front-end web development, going from knowing a pretty minimal amount of javascript to knowing all sorts of intricacies about browser implementations and fluently speaking backbone.js and underscore.js.Working at Tumblr really was a dream come true, and though I&rsquo;m excited to get back to my friends at MIT, I&rsquo;ve realized that this is absolutely something I could do for the rest of my life (or the foreseeable future, at least). Spending the day bringing ideas to life for Tumblr&rsquo;s millions of users, surrounded by the most creative, smart, and friendly people I&rsquo;ve ever met - It almost feels like cheating that I got to call that &ldquo;work&rdquo;."></a>
							</div>
						</div>
						
						<div class="caption">
							<h2><a href="http://ivynewton.tumblr.com/">Megan Belzner: My Summer at Tumblr</a></h2><p>This summer I got the amazing opportunity to intern as a product engineer on the Creation team. I didn&rsquo;t really know what to expect when I first stepped in to the office, but whatever hopes and expectations I could have had, the summer far surpassed them.<br><br>The Creation team is in charge of one of the most important parts of the Tumblr site - posting tools - and most of my summer was spent working with the others on the team to overhaul the code underlying that part of the site. Coming in at the beginning of the summer, I could count the number of times I had worked in an existing codebase on one hand - namely: once, maybe twice. But with the help of the incredible Creation team, I dove right in and started contributing bug fixes, updates, and even entire features. Starting in the very first week I was already writing and deploying code, fixing a bug with note counts and updating Tumblr&rsquo;s user engagement emails. By the end of the summer, I found myself getting ownership of pretty significant parts of the project. Even better, I had learned how to easily track down the source of a bug, figure out what this or that bit of code actually did, and navigate the figurative jungle of javascript.<br><br>It was incredibly exciting and rewarding to work on such a central part of the Tumblr site, knowing that people are going to be using some of the code I wrote to make millions of posts a day. I learned a tremendous amount about front-end web development, going from knowing a pretty minimal amount of javascript to knowing all sorts of intricacies about browser implementations and fluently speaking backbone.js and underscore.js.<br><br>Working at Tumblr really was a dream come true, and though I&rsquo;m excited to get back to my friends at MIT, I&rsquo;ve realized that this is absolutely something I could do for the rest of my life (or the foreseeable future, at least). Spending the day bringing ideas to life for Tumblr&rsquo;s millions of users, surrounded by the most creative, smart, and friendly people I&rsquo;ve ever met - It almost feels like cheating that I got to call that &ldquo;work&rdquo;.<br><br></p>
						</div>
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						<div class="meta_data">
							<div class="inner">
								<a href="http://reneeejp.tumblr.com/"><img class="avatar" src="http://33.media.tumblr.com/avatar_4db54c5101c9_64.png" /></a>
								<div class="content">
									
									<p class="date"><a href="http://engineering.tumblr.com/post/98050002584/megan-belzner-my-summer-at-tumblr-this-summer-i">September 21, 2014</a></p>
									
									
									
									
									<p class="author">Posted by <a href="http://reneeejp.tumblr.com/">reneeejp</a></p>
									<p class="notes"><a href="http://engineering.tumblr.com/post/98050002584/megan-belzner-my-summer-at-tumblr-this-summer-i" class="heart_big"></a> <a href="http://engineering.tumblr.com/post/98050002584/megan-belzner-my-summer-at-tumblr-this-summer-i">66</a></p> 
								</div>
							</div>
						</div>
						
					</li>
					
				</ul>
	
				
				<ul class="pagination">
					
					
					<li class="older">
						<a href="/page/2" title="Older Posts">Older posts</a>
					</li>
					
				</ul>
				

				<footer>
					<nav>
						<h2>Team blogs:</h2>
						<ul>
							<li><a href="http://staff.tumblr.com">Staff</a></li>
							<li><a href="http://ministryofdesign.tumblr.com">Design</a></li>
							<li><a href="http://engineering.tumblr.com">Engineering</a></li>
							<li><a href="http://international.tumblr.com">International</a></li>
							<li><a href="http://support.tumblr.com">Support</a></li>
						</ul>
					</nav>
					<nav class="international">
						<ul>
							
							<li><a href="http://staff.tumblr.com">English</a></li>
							
							
							
							<li><a href="http://mitarbeiter.tumblr.com">Deutsch</a></li>
							
							
							
							<li><a href="http://equipo.tumblr.com">Español</a></li>
							
							
							
							<li><a href="http://equipe.tumblr.com">Français</a></li>
							
							
							
							<li><a href="http://lostaff.tumblr.com">Italiano</a></li>
							
							
							
							<li><a href="http://nihongo.tumblr.com">日本語</a></li>
							
							
							
							<li><a href="http://medewerkers.tumblr.com">Nederlands</a></li>
							
							
							
							<li><a href="http://komanda.tumblr.com">Pусский</a></li>
							
							
							
							<li><a href="http://ekipa.tumblr.com">Polski</a></li>
							
							
							
							<li><a href="http://equipebrasil.tumblr.com">Português (BR)</a></li>
							
							
							
							<li><a href="http://equipaportugal.tumblr.com">Português (PT)</a></li>
							
							
							
							<li><a href="http://ekip.tumblr.com">Türkçe</a></li>
							
						</ul>
					</nav>
					<p class="copyright">© 2007-2012 All rights reserved. TUMBLR is a registered trademark of Tumblr, Inc.</p>
				</footer>
			</div>
		</section>
	</div>
<!-- BEGIN TUMBLR CODE --><iframe scrolling="no" width="1" height="1" frameborder="0" style="background-color:transparent; overflow:hidden; position:absolute; top:0; left:0; z-index:9999;" id="ga_target"></iframe><script type="text/javascript">
    (function(){
        var analytics_frame = document.getElementById('ga_target');
        var analytics_iframe_loaded;
        var user_logged_in;
        var blog_is_nsfw = 'No';
        var addthis_enabled = false;

        var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
        var eventer = window[eventMethod];
        var messageEvent = eventMethod == "attachEvent" ? "onmessage" : "message";
        eventer(messageEvent,function(e) {
            var message = (e.data && e.data.split) ? e.data.split(';') : '';
            switch (message[0]) {
                case 'analytics_iframe_loaded':
                    analytics_iframe_loaded = true;
                    postCSMessage();
                    postGAMessage();
                    postATMessage();
                    break;
                case 'user_logged_in':
                    user_logged_in = message[1];
                    postGAMessage();
                    postATMessage();
                    break;
            }
        }, false);

        analytics_frame.src = "https://secure.assets.tumblr.com/analytics.html?f65f173ecd0610e1ad2f9930f8476598#" + 
                              "http://engineering.tumblr.com";
        function postGAMessage() {
            if (analytics_iframe_loaded && user_logged_in) {
                var is_ajax = false;
                analytics_frame.contentWindow.postMessage(['tick_google_analytics', is_ajax, user_logged_in, blog_is_nsfw, '/?route=%2F'].join(';'), analytics_frame.src.split('/analytics.html')[0]);
            }
        }
        function postCSMessage() {
            COMSCORE = true;
            analytics_frame.contentWindow.postMessage('enable_comscore;' + window.location, analytics_frame.src.split('/analytics.html')[0]);
        }
        function postATMessage() {
            if (addthis_enabled && analytics_iframe_loaded) {
                analytics_frame.contentWindow.postMessage('enable_addthis', analytics_frame.src.split('/analytics.html')[0]);
            }
        }
    })();
</script><script type="text/javascript">!function(s){s.src='https://px.srvcs.tumblr.com/impixu?T=1433751527&J=eyJ0eXBlIjoidXJsIiwidXJsIjoiaHR0cDpcL1wvZW5naW5lZXJpbmcudHVtYmxyLmNvbVwvIiwicmVxdHlwZSI6MCwicm91dGUiOiJcLyJ9&U=EKLKHIIJOL&K=307e1d7670892ef63185e1128f36a2b92828819a6d9b9ab535d819ec2002a9b0&R=https%3A%2F%2Fwww.google.co.in%2F'.replace(/&R=[^&$]*/,'').concat('&R='+escape(document.referrer)).slice(0,2000).replace(/%.?.?$/,'');}(new Image());</script><noscript><img style="position:absolute;z-index:-3334;top:0px;left:0px;visibility:hidden;" src="https://px.srvcs.tumblr.com/impixu?T=1433751527&J=eyJ0eXBlIjoidXJsIiwidXJsIjoiaHR0cDpcL1wvZW5naW5lZXJpbmcudHVtYmxyLmNvbVwvIiwicmVxdHlwZSI6MCwicm91dGUiOiJcLyIsIm5vc2NyaXB0IjoxfQ==&U=EKLKHIIJOL&K=cc82f3b59e4a20df0cf7c60d1fd3f0bc8a92a67a555d628567a309cfa243ba03&R=https%3A%2F%2Fwww.google.co.in%2F"></noscript><script>
        (function (w,d) {
            'use strict';
            var l = function(el, type, listener, useCapture) {
                el.addEventListener ?
                el.addEventListener(type, listener, !!useCapture) :
                el.attachEvent && el.attachEvent('on' + type, listener, !!useCapture);
            };
            var a = function () {
                                if (d.getElementById('tumblr-cdx')) {
                    return;
                }
                var s = d.createElement('script');
                var el = d.getElementsByTagName('script')[0];
                s.async = true;
                s.src = 'http://assets.tumblr.com/assets/scripts/vendor/cedexis/cedexis.radar.js?_v=52f4655fc08c33e92bbf84738fc9cc2c';
                s.type = 'text/javascript';
                s.id = 'tumblr-cdx';
                d.body.appendChild(s);
            };
            l(w,'load',a);
        }(window, document));
</script><script type="text/javascript">!function(s){s.src='https://px.srvcs.tumblr.com/impixu?T=1433751527&J=eyJ0eXBlIjoicG9zdCIsInVybCI6Imh0dHA6XC9cL2VuZ2luZWVyaW5nLnR1bWJsci5jb21cLyIsInJlcXR5cGUiOjAsInJvdXRlIjoiXC8iLCJwb3N0cyI6W3sicG9zdGlkIjoiMTE4OTQ4ODY2NTc0IiwiYmxvZ2lkIjoiMTgxMzMwOTgiLCJzb3VyY2UiOjMzfSx7InJvb3RfYmxvZ2lkIjoiNTY2ODY3ODkiLCJyb290X3Bvc3RpZCI6IjExNzcxOTc2MTM1MyIsInBvc3RpZCI6IjExNzc4NTc2OTA2NCIsImJsb2dpZCI6IjE4MTMzMDk4Iiwic291cmNlIjozM30seyJwb3N0aWQiOiIxMTE0OTYxMzYxNTkiLCJibG9naWQiOiIxODEzMzA5OCIsInNvdXJjZSI6MzN9LHsicG9zdGlkIjoiMTA5NDAxNjIxOTk5IiwiYmxvZ2lkIjoiMTgxMzMwOTgiLCJzb3VyY2UiOjMzfSx7InBvc3RpZCI6IjEwODg0NzQ0NzE3OSIsImJsb2dpZCI6IjE4MTMzMDk4Iiwic291cmNlIjozM30seyJwb3N0aWQiOiIxMDQxODMwNjMzMzQiLCJibG9naWQiOiIxODEzMzA5OCIsInNvdXJjZSI6MzN9LHsicG9zdGlkIjoiMTAyOTA2MzU5MDM0IiwiYmxvZ2lkIjoiMTgxMzMwOTgiLCJzb3VyY2UiOjMzfSx7InBvc3RpZCI6IjEwMTc3NjQwMTg1OSIsImJsb2dpZCI6IjE4MTMzMDk4Iiwic291cmNlIjozM30seyJwb3N0aWQiOiI5ODMzMTY0MjkwNCIsImJsb2dpZCI6IjE4MTMzMDk4Iiwic291cmNlIjozM30seyJwb3N0aWQiOiI5ODA1MDAwMjU4NCIsImJsb2dpZCI6IjE4MTMzMDk4Iiwic291cmNlIjozM31dfQ==&U=HHAHPGHGEN&K=3e8022ff715cebbda204a740f0762fedb49d280d62422a16fe8316e304906c44&R=https%3A%2F%2Fwww.google.co.in%2F'.replace(/&R=[^&$]*/,'').concat('&R='+escape(document.referrer)).slice(0,2000).replace(/%.?.?$/,'');}(new Image());</script><noscript><img style="position:absolute;z-index:-3334;top:0px;left:0px;visibility:hidden;" src="https://px.srvcs.tumblr.com/impixu?T=1433751527&J=eyJ0eXBlIjoicG9zdCIsInVybCI6Imh0dHA6XC9cL2VuZ2luZWVyaW5nLnR1bWJsci5jb21cLyIsInJlcXR5cGUiOjAsInJvdXRlIjoiXC8iLCJwb3N0cyI6W3sicG9zdGlkIjoiMTE4OTQ4ODY2NTc0IiwiYmxvZ2lkIjoiMTgxMzMwOTgiLCJzb3VyY2UiOjMzfSx7InJvb3RfYmxvZ2lkIjoiNTY2ODY3ODkiLCJyb290X3Bvc3RpZCI6IjExNzcxOTc2MTM1MyIsInBvc3RpZCI6IjExNzc4NTc2OTA2NCIsImJsb2dpZCI6IjE4MTMzMDk4Iiwic291cmNlIjozM30seyJwb3N0aWQiOiIxMTE0OTYxMzYxNTkiLCJibG9naWQiOiIxODEzMzA5OCIsInNvdXJjZSI6MzN9LHsicG9zdGlkIjoiMTA5NDAxNjIxOTk5IiwiYmxvZ2lkIjoiMTgxMzMwOTgiLCJzb3VyY2UiOjMzfSx7InBvc3RpZCI6IjEwODg0NzQ0NzE3OSIsImJsb2dpZCI6IjE4MTMzMDk4Iiwic291cmNlIjozM30seyJwb3N0aWQiOiIxMDQxODMwNjMzMzQiLCJibG9naWQiOiIxODEzMzA5OCIsInNvdXJjZSI6MzN9LHsicG9zdGlkIjoiMTAyOTA2MzU5MDM0IiwiYmxvZ2lkIjoiMTgxMzMwOTgiLCJzb3VyY2UiOjMzfSx7InBvc3RpZCI6IjEwMTc3NjQwMTg1OSIsImJsb2dpZCI6IjE4MTMzMDk4Iiwic291cmNlIjozM30seyJwb3N0aWQiOiI5ODMzMTY0MjkwNCIsImJsb2dpZCI6IjE4MTMzMDk4Iiwic291cmNlIjozM30seyJwb3N0aWQiOiI5ODA1MDAwMjU4NCIsImJsb2dpZCI6IjE4MTMzMDk4Iiwic291cmNlIjozM31dLCJub3NjcmlwdCI6MX0=&U=HHAHPGHGEN&K=e576c78490f7b9f02c34cafa0e9ebec2607b24be49eb101fe0729e5f18f7d64b&R=https%3A%2F%2Fwww.google.co.in%2F"></noscript><script>
                    (function() {
                        var s = document.createElement('script');
                        var el = document.getElementsByTagName('script')[0];
                        s.src = ('https:' == document.location.protocol ? 'https://s' : 'http://l') + '.yimg.com/ss/rapid-3.18.1.js';
                        s.onload = function(){
                            var YAHOO = window.YAHOO;
                            if (YAHOO) {
                                var keys = {
                                    pd:'/',
                                    _li:0,
                                    b_id:18133098,
                                    i_rad:0,
                                    i_strm:0,
                                    test_id: 'OLD', // version bucket
                                    anon_id: ''
                                };
                                var conf = {
                                                                        spaceid:1197716038,
                                    client_only:1,
                                    yql_enabled:false,
                                    keys:keys,
                                    nol:1
                                };
                                YAHOO.rapid = new YAHOO.i13n.Rapid(conf);
                            }
                        };
                        el.parentNode.insertBefore(s, el);
                    })();
                </script><script>
        (function (w,d) {
            'use strict';
            var l = function(el, type, listener, useCapture) {
                el.addEventListener ?
                el.addEventListener(type, listener, !!useCapture) :
                el.attachEvent && el.attachEvent('on' + type, listener, !!useCapture);
            };
            var a = function () {
                                if (d.getElementById('tumblr-cdx')) {
                    return;
                }
                var s = d.createElement('script');
                var el = d.getElementsByTagName('script')[0];
                s.async = true;
                s.src = 'http://assets.tumblr.com/assets/scripts/vendor/cedexis/cedexis.radar.js?_v=52f4655fc08c33e92bbf84738fc9cc2c';
                s.type = 'text/javascript';
                s.id = 'tumblr-cdx';
                d.body.appendChild(s);
            };
            l(w,'load',a);
        }(window, document));
</script><iframe id="tumblr_controls" class="tumblr_controls" width="1" height="1" frameborder="0" scrolling="no" src="https://secure.assets.tumblr.com/assets/html/iframe/o.html?_v=94a1c12c347bd23eb801dc09d87cefd0#src=http%3A%2F%2Fengineering.tumblr.com%2F&amp;lang=en_US&amp;name=engineering&amp;avatar=http%3A%2F%2F31.media.tumblr.com%2Favatar_a5e216173cf5_64.png&amp;title=Tumblr+Engineering&amp;url=http%3A%2F%2Fengineering.tumblr.com%2F&amp;page_slide=no_slide"></iframe>
<div id="teaser_iframe_container" style="display:none;"><iframe scrolling="no" frameborder="0" src="http://assets.tumblr.com/assets/html/iframe/teaser.html?_v=ebe29782704cb65e11c1d7dc3c1b6f0c#src=http%3A%2F%2Fengineering.tumblr.com%2F&amp;lang=en_US&amp;name=engineering&amp;avatar=http%3A%2F%2F31.media.tumblr.com%2Favatar_a5e216173cf5_64.png&amp;title=Tumblr+Engineering&amp;url=http%3A%2F%2Fengineering.tumblr.com%2F&amp;page_slide=no_slide" id="teaser_iframe" width="1" height="1"></iframe></div><script type="text/javascript">
    (function(Tumblr){
        var follow_iframe_initialized = false;
        if (Tumblr.FollowTeaser && Tumblr.PostMessageListener) {
            // Don't do anything until the first initialize event
            Tumblr.PostMessageListener.initialize(function(message, origin) {
                if (follow_iframe_initialized || message.length < 2) return;

                if (message[0] === 'follow_iframe' && message[1] === 'enable') {
                    Tumblr.FollowTeaser.current_page = 1;
                    Tumblr.FollowTeaser.infer_infinite_scroll = true;
                    Tumblr.FollowTeaser.create_from_tumblr_controls("http:\/\/assets.tumblr.com\/assets\/html\/iframe\/follow.html?_v=b2497930de8c1a4bc01163e7acbd1bf8");
                    Tumblr.FollowTeaser.scroll_listener(true);
                    follow_iframe_initialized = true;
                }
            });
        }
    })(this.Tumblr || (this.Tumblr = {}));
</script><!--[if IE]><script type="text/javascript">document.getElementById('tumblr_controls').allowTransparency=true;</script><![endif]--><!-- END TUMBLR CODE -->

</body>
</html>